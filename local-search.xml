<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>linux上的vscode、git与github的互联工作流</title>
    <link href="/2024/07/26/git&amp;github/"/>
    <url>/2024/07/26/git&amp;github/</url>
    
    <content type="html"><![CDATA[<h1 id="一、介绍与要求"><a href="#一、介绍与要求" class="headerlink" title="一、介绍与要求"></a>一、介绍与要求</h1><ol><li>介绍：我刚刚改到linux系统（ubuntu22.04）上进行学习和工作，深感到linux的方便快捷，于是想在此记录以下git和github的学习过程，也权当备忘录。</li><li>要求：强烈建议使用梯子（VPN）进行操作，否则git指令很可能会卡顿，因为github的服务器在国外。本文默认电脑上已经装好git和vscode、已注册git的用户名和邮箱。</li></ol><h1 id="二、git和github联动"><a href="#二、git和github联动" class="headerlink" title="二、git和github联动"></a>二、git和github联动</h1><h2 id="2-1-git与github的连接"><a href="#2-1-git与github的连接" class="headerlink" title="2.1  git与github的连接"></a>2.1  git与github的连接</h2><p>首先输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa -C &quot;git注册的邮箱&quot;<br></code></pre></td></tr></table></figure><p>然后根据它的提示按三下回车，出现一个图案就表示密钥生成成功。在主文件夹（即&#x2F;home&#x2F;用户名称&#x2F;）下找到id_rsa.pub文件，进入其中将它的内容<strong>全部</strong>复制下来。</p><p>切换到github界面中，点击你的头像–Settings–SSH and GPG keys（在左边框上），点击new ssh key，在这个界面中，title就是你给这个密钥的命名，比如说这个是我linux设备的密钥，我就给他命名为“linux”，并把刚刚复制的公钥粘贴到key那个框中，点击add ssh key即可连接git与你的giyhub账号。<br><img src="/img/github&vscode/ssh_key.png" alt="ssh key添加界面"></p><p>接下来在git中验证这件事。输入指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh -T git@github.com<br></code></pre></td></tr></table></figure><p>第一次用这个命令需要输入一个”yes”，当出现你的github账号就代表连接成功！</p><p><img src="/img/github&vscode/success_connect.png" alt="成功连接！"></p><h2 id="2-2-git的操作"><a href="#2-2-git的操作" class="headerlink" title="2.2 git的操作"></a>2.2 git的操作</h2><p>这里以我在学习的Coursera的HTML课程为例，来实现git的基本操作。</p><ol><li>拉取远程库 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone &quot;https或ssh&quot;<br></code></pre></td></tr></table></figure> https或ssh</li></ol><p>  <img src="/img/github&vscode/ssh.png" alt="ssh网址">的具体位置在github库的这里，点进库中选择code键即可看见。</p><p>我想拉取这个库的指令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone git@github.com:kingdom-of-warriors/Coursera-HTML.git<br></code></pre></td></tr></table></figure><ol start="2"><li>添加暂存区<br>  在修改文件后，应将它添加到暂存区。执行git status查看，修改过的文件应该是红色的。</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add &quot;改动的文件&quot;<br>git add . # 表示提交所有更改<br></code></pre></td></tr></table></figure><p>  再执行指令<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add index.html<br></code></pre></td></tr></table></figure><br>  后执行git status查看，这个文件将会变为绿色。</p><ol start="3"><li><p>提交本地库</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;日志信息&quot;<br></code></pre></td></tr></table></figure><p>  这个日志信息一般来说是描述你这次更改改了哪些地方，写什么都行。在本例中，我想表示我增加了css渲染内容，那么应该写的指令是</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m &quot;增加css渲染内容&quot;<br></code></pre></td></tr></table></figure></li><li><p>创建别名<br>  在github上创建一个新仓库，像2.2.1那样找到它的SSH或者HTTPS（我更推荐用SSH连接）。这个别名主要是为了<strong>方便推送代码</strong>，相当于给一大段复杂的网址取了一个别名，用这个别名就相当于在用这个网址，所以别名最好短小精悍一点。</p></li></ol><p>  一般来说，github会给你的仓库去一个默认的别名叫origin，可以通过git remote -v 来查看。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add 别名 &quot;SSH或HTTPS网址&quot;<br></code></pre></td></tr></table></figure><p>  如果我想给这个github仓库取一个别名叫HTML，那么指令应该如下：<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add HTML git@github.com:kingdom-of-warriors/Coursera-HTML.git<br></code></pre></td></tr></table></figure><br>  然后执行git remote -v就可以查看别名是否添加成功。<br>  <img src="/img/github&vscode/other_name.png" alt="别名添加成功"></p><ol start="5"><li>推送代码<br>  使用别名可以很快的推送代码，指令为</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push 别名 分支名<br></code></pre></td></tr></table></figure><p>  在本例中指令为<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push HTML main<br></code></pre></td></tr></table></figure><br>  如果不用别名，指令将会是<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push git@github.com:kingdom-of-warriors/Coursera-HTML.git main<br></code></pre></td></tr></table></figure><br>  ，从此处也可以看出别名的方便之处。</p><h1 id="三、vscode与git的方便操作（待更新）"><a href="#三、vscode与git的方便操作（待更新）" class="headerlink" title="三、vscode与git的方便操作（待更新）"></a>三、vscode与git的方便操作（待更新）</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里的git操作介绍全部基于尚硅谷的<a href="https://www.bilibili.com/video/BV1vy4y1s7k6/?spm_id_from=333.999.0.0&vd_source=217dcc16f6693d64dbc48b7cfad6b2fa">课程</a>，想详细学习git的同学们可以去看！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在ubuntu上部署Sabaki以及围棋引擎katago</title>
    <link href="/2024/07/26/sabaki&amp;katago/"/>
    <url>/2024/07/26/sabaki&amp;katago/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Sabaki的部署"><a href="#一、Sabaki的部署" class="headerlink" title="一、Sabaki的部署"></a>一、Sabaki的部署</h1><p>想要配置一个可以用于分析的图像界面katago，需要一个可视化的图形界面（Lizzieyzy、Sabaki等等）和katago引擎。在Ubuntu上，我推荐使用Sabaki，因为它下载即可打开使用，而Lizzieyzy虽然功能更齐全，但它需要java环境而且容易报错。</p><p><img src="/img/sabaki/sabaki.png" alt="Sabaki界面"></p><h2 id="1-1-下载Sabaki"><a href="#1-1-下载Sabaki" class="headerlink" title="1.1 下载Sabaki"></a>1.1 下载Sabaki</h2><p>Sabaki可在github上下载，下载各个版本的链接为<a href="https://github.com/SabakiHQ/Sabaki/releases/tag/v0.52.2">Sabaki</a>，对于Ubuntu选择<strong>linux-x64.AppImage</strong>的版本。在下载到本地后，右键“属性-权限”赋予它执行权限，点击即可运行。</p><h2 id="1-2-创造快捷方式"><a href="#1-2-创造快捷方式" class="headerlink" title="1.2 创造快捷方式"></a>1.2 创造快捷方式</h2><p>首先下载它的<a href="https://github.com/SabakiHQ/Sabaki/blob/master/logo.png">Logo</a>，然后创建.desktop文件，具体代码可参考如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">[Desktop Entry]<br>Name=Sabaki<br>Exec=/path/to/Sabaki.AppImage<br>Icon=/path/to/logo.png<br>Terminal=false<br><span class="hljs-type">Type</span>=Application<br></code></pre></td></tr></table></figure><p>将其复制到桌面并赋予执行权限即可。</p><h1 id="二、下载katago"><a href="#二、下载katago" class="headerlink" title="二、下载katago"></a>二、下载katago</h1><p>接下来我们下载katago引擎，这里只考虑有独显的电脑的配置。我们有三种选择，从易到难分别为OpenCL、CUDA和Tensor RT版本，下面这三种都会介绍。<br><a href="https://github.com/lightvector/KataGo/releases/tag/v1.14.1">下载网址</a></p><h2 id="2-1-OpenCL版本"><a href="#2-1-OpenCL版本" class="headerlink" title="2.1 OpenCL版本"></a>2.1 OpenCL版本</h2><h3 id="2-1-1-下载OpenCL版katago引擎"><a href="#2-1-1-下载OpenCL版katago引擎" class="headerlink" title="2.1.1 下载OpenCL版katago引擎"></a>2.1.1 下载OpenCL版katago引擎</h3><p>如果你的电脑有一个不错的独显并且希望快速开始的话，OpenCL是最好的选择，它不需要配置CUDA或者cuDNN。<br>在<a href="https://github.com/lightvector/KataGo/releases/tag/v1.14.1">下载界面</a>选择katago-v1.14.1-opencl-linux-x64.zip这个安装包，其中后缀有bs29的是娱乐版本，它支持29 $\times$ 29的超大棋盘，不过对电脑性能的要求也更高，想玩的就可以下载带bs29的版本。<br>在合适的位置新建文件夹katago，在下面再新建一个文件夹katago_opencl，将这个安装包解压至katago_opencl下，结果如下所示。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">├── katago_opencl<br>    ├── analysis_example.cfg<br>    ├── cacert.pem<br>    ├── contribute_example.cfg<br>    ├── default_gtp.cfg<br>    ├── katago<br>    ├── katago-v1.14.1-opencl-linux-x64.zip<br>    ├── match_example.cfg<br>    └── README.txt<br></code></pre></td></tr></table></figure><h3 id="2-1-2-下载katago权重"><a href="#2-1-2-下载katago权重" class="headerlink" title="2.1.2 下载katago权重"></a>2.1.2 下载katago权重</h3><p>有了引擎，还需要下载katago的权重<a href="https://katagotraining.org/networks/">下载地址</a>。其中标了绿色的那一行就是elo分最高（最厉害）的权重。在Network File下点击download，将下载下来的bin.gz文件剪切到katago&#x2F;katago_opencl文件夹下。<br><img src="/img/sabaki/weight.png" alt="权重下载网页"></p><h3 id="2-1-3-配置OpenCL版katago"><a href="#2-1-3-配置OpenCL版katago" class="headerlink" title="2.1.3 配置OpenCL版katago"></a>2.1.3 配置OpenCL版katago</h3><p>打开Sakabi，在左上角点开File-Preferences然后切换语言为中文并重启Sakabi。接着点开文件–首选项–引擎，新建文件夹sabari_log作为日志保存目录。<br>还是在引擎这里，点击“新增”，会出现四行需要我们填的东西，分别为：</p><ol><li>引擎的名字（任意取）</li><li>引擎路径：&#x2F;katago&#x2F;katago_opencl&#x2F;katago（这个katago文件的路径）</li><li>运行参数：gtp -model &lt;权重文件名&gt;.bin.gz -config default_gtp.cfg</li><li>启动参数：time_settings 0 5 1</li></ol><p>示例如下：<br><img src="/img/sabaki/opencl_para.png" alt="启动参数（参考）"><br>然后点击”关闭“，点击左上角的小三角并选中配置的引擎，就开始初始化啦。第一次初始化的时间会在两三分钟左右，耐心等待～～<br>出现”GTP ready, beginning main protocol loop“则配置成功！</p><h3 id="2-1-4-遇到问题及解决"><a href="#2-1-4-遇到问题及解决" class="headerlink" title="2.1.4 遇到问题及解决"></a>2.1.4 遇到问题及解决</h3><ol><li><p>问题：在初始化引擎的时候，我遇到了<strong>error while loading shared libraries: libzip.so.5: cannot open shared object file: No such file or directory</strong>的问题，这是因为linux系统缺少libzip5造成的。</p></li><li><p>解决：首先我们需要下载zlib库。zlib下载方式见这篇<a href="https://blog.csdn.net/lushixuan12345/article/details/122545491">blog</a>，不过注意把下载网址<a href="http://www.zlib.net/zlib-1.2.11.tar.gz%E6%94%B9%E4%B8%BAhttp://www.zlib.net/fossils/zlib-1.2.11.tar.gz%E3%80%82">http://www.zlib.net/zlib-1.2.11.tar.gz改为http://www.zlib.net/fossils/zlib-1.2.11.tar.gz。</a><br>有了zlib库后，这是libzip5的<a href="https://launchpad.net/ubuntu/+archive/primary/+sourcefiles/libzip/1.5.1-0ubuntu1/libzip_1.5.1.orig.tar.xz">下载网址</a>，我们根据这篇<a href="https://blog.csdn.net/iamhuanyu/article/details/129603632">blog</a>的步骤来下载libzip5，再在其中找到libzip.so.5文件，并创建<strong>软链接到&#x2F;usr&#x2F;lib&#x2F;上</strong>，命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ln -s &quot;libzip.so.5文件所在位置&quot; /usr/lib/libzip.so.5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">比如我的电脑中，命令应该为：</span><br>sudo ln -s /usr/local/lib/libzip.so.5 /usr/lib/libzip.so.5<br></code></pre></td></tr></table></figure><p>其他同类型的报错解决方式也是如出一辙。先在电脑中找找有没有该文件，如果有就创建软链接，如果没有就下载所需要的库，再创建相应的软链接。</p></li></ol><h2 id="2-2-CUDA版本"><a href="#2-2-CUDA版本" class="headerlink" title="2.2 CUDA版本"></a>2.2 CUDA版本</h2><p>CUDA版本的katago比OpenCL版本的强不少，不过安装起来也更复杂，需要安装CUDA和cuDNN两个东西。</p><h3 id="2-2-1-CUDA安装"><a href="#2-2-1-CUDA安装" class="headerlink" title="2.2.1 CUDA安装"></a>2.2.1 CUDA安装</h3><p>在katago引擎的<a href="https://github.com/lightvector/KataGo/releases/tag/v1.14.1">下载链接</a>找到有cuda和cudnn的那个版本，发现最新版需要12.1的CUDA和8.9.7的cuDNN。在电脑上通过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nvidia-smi<br></code></pre></td></tr></table></figure><p>来查看是否支持12.1的CUDA版本（显示的值要大于等于12.1，我这里是12.2），如果比12.1低的话可以下载更低版本的引擎。<br><img src="/img/sabaki/nvidia-smi.png" alt="指令输出，右上角显示12.2"></p><p>于是我们在官网找到CUDA12.1的<a href="https://developer.nvidia.com/cuda-12-1-0-download-archive">下载网址</a>，选择”linux–x86_64–Ubuntu–22.04–runfile(local)”（这个要根据具体ubuntu版本进行调整），下面就会出现安装的指令。<br><img src="/img/sabaki/cuda.png" alt="命令行安装" title="命令行安装cuda"><br>运行.run文件后会出现一个图形化的安装界面，可以根据<a href="https://blog.csdn.net/Sihang_Xie/article/details/127347139">这篇文章</a>的指导来做，总之就是在安装的时候<strong>不要点上安装驱动</strong>，否则很容易导致nvidia驱动损坏。</p><h3 id="2-2-2-遇到问题及解决"><a href="#2-2-2-遇到问题及解决" class="headerlink" title="2.2.2 遇到问题及解决"></a>2.2.2 遇到问题及解决</h3><ol><li>问题：在运行.run文件时，我遇到了安装失败的问题，安装日志显示</li></ol><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">[INFO]: md5 matches, removing file /var/log/nvidia/.uninstallManifests/CUDA_Toolkit_10.2-components/CUDA_Tools_10.2-components/CUDA_Visual_Tools_10.2-components/<br>[ERROR]: boost::filesystem::remove: Directory not empty: &quot;/var/log/nvidia/.uninstallManifests/CUDA_Toolkit_10.2-components/CUDA_Tools_10.2-components/CUDA_Visual_Tools_10.2-components/&quot;<br></code></pre></td></tr></table></figure><ol start="2"><li>解决：在查询<a href="https://tieba.baidu.com/p/6848132251">资料</a>后，我们在运行.run文件的指令后应该加上一些参数，具体指令如下：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo sh cuda_12.1.0_530.30.02_linux.run --silent --toolkit --samples --librarypath=/usr/local/cuda-12.1<br></code></pre></td></tr></table></figure><p>这条指令运行的时候不会弹出图形界面，在等待一会后运行完成，把~&#x2F;.bashrc文件更新一下后，通过nvcc -V来看CUDA是否安装成功。（更新bashrc文件的过程详见<a href="https://blog.csdn.net/Sihang_Xie/article/details/127347139">上面这篇文章</a>）</p><ol start="3"><li>这个问题正常情况下是不会出现的。</li></ol><h3 id="2-2-2-cuDNN安装"><a href="#2-2-2-cuDNN安装" class="headerlink" title="2.2.2 cuDNN安装"></a>2.2.2 cuDNN安装</h3><p>这是cuDNN8.9.7的x86<a href="https://developer.nvidia.com/downloads/compute/cudnn/secure/8.9.7/local_installers/12.x/cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz/">下载链接</a>，也可以在<a href="https://developer.nvidia.cn/rdp/cudnn-archive">官网</a>上找到下载别的版本的cuDNN，不过这个网址可能需要你注册一个nvidia帐号。</p><p>接下来的具体下载步骤可以参考<a href="https://blog.csdn.net/enjoyyl/article/details/134893210">这篇文章</a>，为了方便起见，我将安装指令粘贴过来：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -xvf cudnn-linux-x86_64-8.9.7.29_cuda12-archive.tar.xz<br>sudo cp cudnn-*-archive/include/cudnn*.h /usr/local/cuda/include <br>sudo cp -P cudnn-*-archive/lib/libcudnn* /usr/local/cuda/lib64 <br>sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*<br></code></pre></td></tr></table></figure><h3 id="2-2-3-CUDA版本的引擎安装"><a href="#2-2-3-CUDA版本的引擎安装" class="headerlink" title="2.2.3 CUDA版本的引擎安装"></a>2.2.3 CUDA版本的引擎安装</h3><p>与本文2.1.1和2.1.2章过程一样，在katago目录下创建一个katago_cuda文件夹，将引擎文件解压后放入其中，同时也要把权重文件也放入其中，这里不再赘述，下面是成功后的katago目录下的文件：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs txt">katago<br>├── katago_cuda<br>│   ├── analysis_example.cfg<br>│   ├── cacert.pem<br>│   ├── contribute_example.cfg<br>│   ├── default_gtp.cfg<br>│   ├── kata1-b28c512nbt-s7168446720-d4316919285.bin.gz<br>│   ├── katago<br>│   ├── match_example.cfg<br>│   └── README.txt<br>└── katago_opencl<br>    ├── analysis_example.cfg<br>    ├── cacert.pem<br>    ├── contribute_example.cfg<br>    ├── default_gtp.cfg<br>    ├── kata1-b28c512nbt-s7168446720-d4316919285.bin.gz<br>    ├── katago<br>    ├── match_example.cfg<br>    └── README.txt<br></code></pre></td></tr></table></figure><h3 id="2-2-4-配置CUDA版katago"><a href="#2-2-4-配置CUDA版katago" class="headerlink" title="2.2.4 配置CUDA版katago"></a>2.2.4 配置CUDA版katago</h3><p>过程与本文2.1.3一样，下面给出我的配置：<br><img src="/img/sabaki/cuda_para.png" alt="cuda版的启动参数配置"><br>在配置完成后点左上三角即可初始化引擎，等待看是否报错&#x2F;配置成功。</p><h3 id="2-2-5-遇到问题及解决"><a href="#2-2-5-遇到问题及解决" class="headerlink" title="2.2.5 遇到问题及解决"></a>2.2.5 遇到问题及解决</h3><ol><li>问题：在初始化引擎的时候，我遇到了<strong>error while loading shared libraries: libcudnn.so.8: cannot open shared object file: No such file or directory</strong>的问题，这是因为我们下载cudnn后没有将其移动到文件夹中。</li><li>解决：通过<strong>查找文件名</strong>找到我们刚刚下载的cudnn中的libcudnn_cnn_infer.so.8、libcudnn_ops_infer.so.8和 libcudnn.so.8这三个文件，将其复制到katago&#x2F;katago_cuda文件夹下即可。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/07/26/hello-world/"/>
    <url>/2024/07/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
